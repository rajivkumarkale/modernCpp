1. when we declare an array of size x and intitialize only starting few elements the remaining will be intitialized to 0 in case of int.
    => int families[5] {12, 7, 5}; // remaining will be 0.

    => we can use range based for loops in array:
        
        for(auto value: families){
            std::cout << "value: " << value << std::endl;
        }

    => we can omit the size of the array when we intitialize at the time of declaration:
        const int multipliers[] {22, 40, 15};

    => we can make arrays constant, so that the values can't be modified.
        const int multipliers[] {22, 40, 15};
        multipliers[1] = 20; // COMPILATION ERROR : Can't change elements of a const array
    
2. Compilation will fail for the below two functions:
    -> In c++ when we pass an array to a function, IT DECAYS INTO A POINTER TO ITS FIRST ELEMENT.
        Therefore int arr[] is equivalent to int* arr
    
    -> The compiler no longer knows the array's size, so it cannot generate a range-based for loop for it.

    void print_arr(int arr[]) {
        for (int value : arr) {
            std::cout << "value: " << value << std::endl;
        }
    }

    void print_ptr(int *arr) {
        for (int value : arr) {
            std::cout << "value: " << value << std::endl;
        }
    }


    int main() {
        int arr[] = {1, 3, 4, 5, 6, 7};

        // this will work without any issue as the compiler knows the size of the arr at compile time.
        for (int value : arr) {
            std::cout << "value: " << value << std::endl;
        }

        //print_ptr(arr);
        //print_arr(arr);

        return 0;
    }


3.  => In c++17, std::size() was introduced for arrays.
        int scores[] {10, 324, 3, 344, 5};
        
        for(size_t i=0; i<std::size(scores); i++)
            std::cout << scores[i] << std::endl;

    => Before C++17 
        int scores[] {10, 324, 3, 344, 5};
        size_t len = sizeof(scores) / sizeof(scores[0]);


4. Array of characters:
    => c-string has a null character at the end to specify that we have reached the end of the string.
        -> Not a proper c-string:
            char message[5] = {'H', 'e', 'l', 'l', 'o'}; // this is not a proper c-string as it doesn't end with null character.

        -> proper c-string:
            char message[6] = {'H', 'e', 'l', 'l', 'o', '\0'};
            or
            char message[6] = {'H', 'e', 'l', 'l', 'o'}; // size is 6 , so last character will be 0.

    => c-string literals need not to be init with null character, it is implicitly added to the string.
        char message[] = "Hello"; // '\0' (null character) is implicitly added.

    => arrays of char are special, in the way that we can print them with just the array name, integer arrays can't be printed in this way.
        int numbers[] {1,3,4};
        std::cout << "numbers: " << numbers << std::endl; // will print the address of the base array element.

        char messgae[] = "Hello"
        std::cout << "message: " << message << std::endl; // will print Hello on the console.
    
    => char array created through c-string or c-string literal can be modified.

5. To generate random number in c++
    #include <ctime>

    std::srand(std::time(0)); // give seed value

    then call:
    int diceValue = (std::rand() % 6) + 1;

6. Multidimensional Array:
    => we can omit the size of the first dimension when declaring and intitializing Multidimensional array.
        e.g. 
        int packages[][3] {
            {1,2,3},
            {3,4,5}
        };

    => compiler auto fills the missing values with 0.
        e.g. 
        int arr[][3]{{1, 2}, {4, 5, 6}};

        will result in {{1, 2, 0}, {4, 5, 6}};

  
7. Multidimensional array of characters:
    => 
        char members[][10] = {
            {'J', 'o', 'h', 'n'},
            {'r', 'a', 'j', 'i', 'v'}
        };

        or 
        // this is better as string literal are null terminated.
        char members[][10] = {
            "John",
            "rajiv"
        }


