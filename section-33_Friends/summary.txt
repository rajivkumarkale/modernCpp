1. Friends:
    => Giving access of our own member to external entities. 
    External entities can be either functions or classes.

2. Friend functions:
    => External functions with access to private member of a class.

    => The friend function is first decalred and alive somewhere.
    => The implementation can live in any translation unit. Just be sure that it will be found at linking stage.
    => The declaration has to show up before you call the function.
    => The class determines who is its friend(through friend declaration).
    => The friend declaration can appear in public or private section of the class, either works the same.
    => we can have multiple friend functions in the same class.
    => Friend functions can be overloaded.
    => We have to use the object_name.member_var_name syntax in the friend function.
    => Friend functions are not member funtions.
    => friend functions don't have access to the 'this' pointer.

    => eg. 
        class Dob{
            friend void debug_dog_info(const Dog& dog);
        };

        void debug_dog_info(const Dog& dog) {
            std::cout << "Dog: [ name: " << dog.dog_name << ", age: " << dog.dog_age
                    << " ]" << std::endl;
        }

    => Note: Choose your friends carefully as they an do crazy things to your private members.

3. Friend class:
    => If we want to give a class access to our class's private members, we mark it as friend.

    => e.g 
    class Dog {
        friend class Cat;  // class Cat now has access to private members of Dog class.
    };

    => In the above example class Cat is friend of class Dog , but the reverse isn't true.


4. One use case:
    => Overloading input (>>) and output (<<) operators for custom classes in C++ is often done using friend functions 
       because these operators require access to private or protected members of the class.

    class Person {
    private:
        std::string name;
        int age;

    public:
        // Constructor
        Person(std::string name = "", int age = 0) : name(name), age(age) {}

        // Friend functions for input and output
        friend std::ostream& operator<<(std::ostream& out, const Person& p);
        friend std::istream& operator>>(std::istream& in, Person& p);
    };

    // Overload << (output stream)
    std::ostream& operator<<(std::ostream& out, const Person& p) {
        out << "Name: " << p.name << ", Age: " << p.age;
        return out;
    }

    // Overload >> (input stream)
    std::istream& operator>>(std::istream& in, Person& p) {
        std::cout << "Enter name: ";
        in >> p.name;
        std::cout << "Enter age: ";
        in >> p.age;
        return in;
    }

    int main() {
        Person p;

        std::cin >> p; // Read Person from input
        std::cout << p; // Write Person to output

        return 0;
    }