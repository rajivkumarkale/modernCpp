1. Smart Pointers (C++11):
    => smart pointers are a solution offered by modern C++ to release the memory automatically when the pointer
       managing the memory goes out of scope.

    => #include<memory> We have to include the memory header for using smart pointer in c++.
        i) std::unique_ptr
        ii) std::shared_ptr 
        iii) std::weak_ptr 
    
2. Unique Pointer:
   => i) At any given moment there can only be one pointer managing the memory.
       ii) Memory is automatically released when the pointer goes out of scope.
    
   => For stack variables there is no need to release memory and required only for memory allocated in heap.
         e.g.  Dog dog1("Dog1");
               dog1.print_dog();   // NO need to release free memory, it will automatically be done when it goes out of scope.
   
   => 
      Dog *p_dog3 = new Dog("Dog3");

      // Can also manage a previously allocated space managed by a raw pointer.
      // Ideally we should make p_dog3 = nullptr to make sure that we don't use the raw pointer from this point onwards.
      // As the memory is now managed by unique_ptr
      std::unique_ptr<Dog> up_dog4(p_dog3);

      std::unique_ptr<Dog> up_dog5(new Dog("Dog5"));
      std::unique_ptr<int> up_int2(new int(200));

      // can also initialize with nullptr and give it memroy to manage later (using std::move).
      std::unique_ptr<Dog> up_dog6(nullptr);

      // can use a unique pointer just like we use a raw pointer.
      up_dog5->print_dog(); // calling function with -> operator

      // Assign to fundamental type
      *up_int2 = 500;

      std::cout << "Integer is: " << *up_int2 << std::endl; // dereferencing
      std::cout << "Integer lives at address: " << up_int2.get() << std::endl; // to get the raw pointer.
   
   => If we dont't want to call the new operator manually, we can use std::make_unique  (C++14 onwards)

      std::unique_ptr<Dog> up_dog_7 = std::make_unique<Dog>("Dog7");
      up_dog_7->print_dog();

      std::unique_ptr<int> p_int3 = std::make_unique<int>(30);
      *p_int3 = 67;

      std::cout << "Value pointed to by p_int3 is :" << *p_int3 << std::endl;
      std::cout << "p_int3 pointing at address :" << p_int3.get() << std::endl;


   => We can't copy unique pointers:
      std::unique_ptr<Dog> up_dog8 = std::make_unique<Dog>("Dog8");
      up_dog8->print_dog();

      // Can get the wrapped pointer address : useful for older raw pointer APIs
      std::cout << "Dog8 memory address :" << up_dog8.get() << std::endl;

      // Copies and Assignments are not allowed with unique ptr 
      std::unique_ptr<Dog> up_dog9 = up_dog8; // Error: Copy Assignment not allowed
      std::unique_ptr<Dog> up_dog10(up_dog9); // Error: Copy Constructor is deleted.

   => Moving ownership is allowed:
      std::unique_ptr<Dog> up_dog11 = std::make_unique<Dog>("Dog11");
      {
         // Now up_dog_12 manages Dog11 and up_dog11 points to nothing(nullptr)
         std::unique_ptr<Dog> up_dog12 = std::move(up_dog11); 

         up_dog12->print_dog();
         std::cout << "Dog12 memory address :" << up_dog12.get() << std::endl;
         std::cout << "up_dog11 is now nullptr :" << up_dog11.get() << std::endl;
      }

   => We can reset the unique pointer , which releases the memory and set the pointer to nullptr.

      std::unique_ptr<Dog> up_dog13 = std::make_unique<Dog>("Dog13");
      up_dog13.reset(); // releases the memory and sets pointer to nullptr 

      // Can use unique pointer in if statement to see if it points somewhere valid 
      if(up_dog13){
         std::cout << "up_dog13 points somewhere valid:" << up_dog13.get() << std::endl;
      }
      else{
         std::cout << "up_dog13 points is null:" << up_dog13.get() << std::endl;
      }
   



    
